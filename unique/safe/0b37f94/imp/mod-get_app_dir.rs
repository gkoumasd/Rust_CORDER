# [doc = " Returns (but **does not create**) path to **app-specific** data"] # [doc = " **subdirectory** for provided data type and subdirectory path."] # [doc = ""] # [doc = " The `path` parameter should be a valid relative path separated by"] # [doc = " **forward slashes** (`/`)."] # [doc = ""] # [doc = " A result of `Ok` means that we determined where the data SHOULD go, but"] # [doc = " it DOES NOT guarantee that the directory actually exists. (See"] # [doc = " [`app_dir`](fn.app_dir.html).)"] pub fn get_app_dir (t : AppDataType , app : & AppInfo , path : & str) -> Result < PathBuf , AppDirsError > { if app . author . is_empty () || app . name . is_empty () { return Err (AppDirsError :: InvalidAppInfo) ; } app_root (t , app) . map (| mut root | { for component in path . split ('/') . filter (| s | ! s . is_empty ()) { root . push (utils :: sanitized (component)) ; } root }) }
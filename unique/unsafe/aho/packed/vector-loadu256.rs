# [doc = " Load a 256-bit vector from slice at the given position. The slice does"] # [doc = " not need to be unaligned."] # [doc = ""] # [doc = " Since this code assumes little-endian (there is no big-endian x86), the"] # [doc = " bytes starting in `slice[at..]` will be at the least significant bits of"] # [doc = " the returned vector. This is important for the surrounding code, since for"] # [doc = " example, shifting the resulting vector right is equivalent to logically"] # [doc = " shifting the bytes in `slice` left."] # [target_feature (enable = "avx2")] pub fn loadu256 (slice : & [u8] , at : usize) -> __m256i { let ptr = slice . get_unchecked (at ..) . as_ptr () ; _mm256_loadu_si256 (ptr as * const u8 as * const __m256i) }